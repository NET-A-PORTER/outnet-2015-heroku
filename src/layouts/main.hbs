<!DOCTYPE html>
<html ng-app="app">
<head ng-controller="HeadCtrl">
	<title>Preston</title>
	<link rel="stylesheet" ng-repeat="element in preston.elements" ng-href=":: element.getCssPath() ::">
</head>
<body>
	<div class="preston-header">
		<div class="preston-title preston-nav-item">Preston</div>
	</div>
	<script src="/js/angular.js"></script>
	<script src="/js/angular-router.js"></script>
	<script src="/js/angular-sanitize.js"></script>
	<script>
	angular
		.module('app', ['ngSanitize', 'ui.router'])
		.config(function($interpolateProvider) {
			// stop conflicting with handlebars
			$interpolateProvider.startSymbol('::');
			$interpolateProvider.endSymbol('::');
		})
		.service('MessageService', function() {
			function display(type, message) {
				alert(message);
			}
			return {
				error: function(message) {
					display('error', message);
				}
			};
		})
		.service('ApiService', function($http, MessageService) {
			return function(version, controller) {
				var versionParsed = parseFloat(version).toFixed(1);
				var baseUrl = '/api/' + versionParsed + '/' + controller;

				return {
					get: function(path) {
						return $http
							.get(baseUrl + (path || ''))
							.error(function(data) {
								MessageService.error(data.message || 'An error occured');
							});
					}
				}
			}
		})
		.factory('StylesFactory', function(ApiService) {
			var api = new ApiService(1.0, 'styles');

			// TODO: cache responses as some are
			// used in multiple controller instances
			return {
				get: function(name) {
					return api.get('/' + name).then(function(result) {
						return result.data;
					});
				},
				getAll: function() {
					return api.get().then(function(result) {
						return result.data;
					});
				},
				getElement: function(style, element) {
					return api.get('/' + style + '/' + element).then(function(result) {
						return result.data;
					});
				}
			};
		})
		.service('StyleElement', function(StylesFactory) {
			var StyleElement = function(style, name) {
				this.style = style;
				this.name = name;
			};
			StyleElement.prototype = {
				getCssPath: function() {
					return '/css/' + this.style + '/' + this.name + '/style.css'
				},
				fetch: function() {
					var self = this;
					StylesFactory
						.getElement(this.style, this.name);
				}
			};
			return StyleElement;
		})
		.service('Style', function(StylesFactory, StyleElement) {
			var Style = function(style, options) {
				this.name = style;
				this.elements = [];
				this.options = angular.extend({
					shallow: false
				}, options);
				this.fetch();
			};
			Style.prototype = {
				fetch: function() {
					var self = this;
					StylesFactory
						.get(this.name)
						.then(function(data) {
							self.populateElements(data.elements);
						});
				},
				populateElements: function(elements) {
					var self = this;
					this.elements = elements.map(function(name) {
						var element = new StyleElement(self.name, name);

						// only fetch element if shallow option false
						if (!self.options.shallow) element.fetch();
						return element;
					});
				}
			};
			return Style;
		})
		.controller('HeadCtrl', function($scope, Style) {
			$scope.preston = new Style('preston');
		});
	</script>
</body>
</html>