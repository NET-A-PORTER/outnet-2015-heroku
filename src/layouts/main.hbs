<!DOCTYPE html>
<html ng-app="app">
<head ng-controller="HeadCtrl">
	<title>Preston</title>
	<link rel="stylesheet" ng-repeat="element in style.elements" ng-href=":: element.getAssetPath('css', 'style.css') ::">
</head>
<body>
	<div ng-controller="NavCtrl" class="preston-header">
		<div class="preston-nav">
			<div ng-repeat="style in styles" ng-bind="style.title" ui-sref="guide(***REMOVED*** name: style.name ***REMOVED***)"></div>
		</div>
		<div class="preston-nav-item" ui-sref="home">Preston</div>
	</div>
	<div class="preston-container" ui-view></div>
	<script src="/js/angular.js"></script>
	<script src="/js/angular-router.js"></script>
	<script src="/js/angular-sanitize.js"></script>
	<script>
	angular
		.module('app', ['ngSanitize', 'ui.router'])
		.config(function($interpolateProvider, $stateProvider, $urlRouterProvider) ***REMOVED***
			// stop conflicting with handlebars
			$interpolateProvider.startSymbol('::');
			$interpolateProvider.endSymbol('::');

			$urlRouterProvider.otherwise('/');
			$stateProvider
				.state('home', ***REMOVED***
					url: '/',
					templateUrl: '/tmpl/home.html'
				***REMOVED***)
				.state('guide', ***REMOVED***
					url: '/style/:name',
					template: '<iframe ng-controller="GuideCtrl" ng-src="/tmpl/guide.html" class="preston-frame"></iframe>'
				***REMOVED***);
		***REMOVED***)
		.service('MessageService', function() ***REMOVED***
			function display(type, message) ***REMOVED***
				alert(message);
			***REMOVED***
			return ***REMOVED***
				error: function(message) ***REMOVED***
					display('error', message);
				***REMOVED***
			***REMOVED***;
		***REMOVED***)
		.service('ApiService', function($http, MessageService) ***REMOVED***
			return function(version, controller) ***REMOVED***
				var versionParsed = parseFloat(version).toFixed(1);
				var baseUrl = '/api/' + versionParsed + '/' + controller;

				return ***REMOVED***
					get: function(path) ***REMOVED***
						return $http
							.get(baseUrl + (path || ''))
							.error(function(data) ***REMOVED***
								MessageService.error(data.message || 'An error occured');
							***REMOVED***);
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***)
		.factory('StylesFactory', function(ApiService) ***REMOVED***
			var api = new ApiService(1.0, 'styles');

			// TODO: cache responses as some are
			// used in multiple controller instances
			return ***REMOVED***
				get: function(name) ***REMOVED***
					return api.get('/' + name).then(function(result) ***REMOVED***
						return result.data;
					***REMOVED***);
				***REMOVED***,
				getAll: function() ***REMOVED***
					return api.get().then(function(result) ***REMOVED***
						return result.data;
					***REMOVED***);
				***REMOVED***,
				getElement: function(style, element) ***REMOVED***
					return api.get('/' + style + '/' + element).then(function(result) ***REMOVED***
						return result.data;
					***REMOVED***);
				***REMOVED***
			***REMOVED***;
		***REMOVED***)
		.service('StyleElement', function(StylesFactory) ***REMOVED***
			var StyleElement = function(style, name) ***REMOVED***
				this.style = style;
				this.name = name;
				this.assets = ***REMOVED******REMOVED***;
			***REMOVED***;
			StyleElement.prototype = ***REMOVED***
				getAssetPath: function(type, name) ***REMOVED***
					return '/' + type + '/' + this.style + '/' + this.name + '/' + name;
				***REMOVED***,
				fetch: function() ***REMOVED***
					var self = this;
					return StylesFactory
						.getElement(this.style, this.name)
						.then(function(data) ***REMOVED***
							self.assets = data.assets;
							return data;
						***REMOVED***);
				***REMOVED***
			***REMOVED***;
			return StyleElement;
		***REMOVED***)
		.service('Style', function($rootScope, StylesFactory, StyleElement) ***REMOVED***
			var Style = function(style, options) ***REMOVED***
				this.title = '';
				this.name = style;
				this.elements = [];
				this.options = angular.extend(***REMOVED***
					shallow: false
				***REMOVED***, options);
				this.fetch();
				return this;
			***REMOVED***;
			Style.prototype = ***REMOVED***
				fetch: function() ***REMOVED***
					var self = this;
					return StylesFactory
						.get(this.name)
						.then(function(data) ***REMOVED***
							self.title = data.title;
							self.populateElements(data.elements)
								.then(function() ***REMOVED***
									// pub/sub baby
									$rootScope.$broadcast('style.load', self);
								***REMOVED***);
							return data;
						***REMOVED***);
				***REMOVED***,
				populateElements: function(elements) ***REMOVED***
					var self = this;
					return Promise.all(
						elements.map(function(name) ***REMOVED***
							return new Promise(function(resolve, reject) ***REMOVED***
								var element = new StyleElement(self.name, name);

								// don't load style elements
								if (self.options.shallow) ***REMOVED***
									resolve(element);
								***REMOVED*** else ***REMOVED***
									// wait for element to load before resolving
									element.fetch().then(function() ***REMOVED***
										resolve(element);
									***REMOVED***, reject);
								***REMOVED***
							***REMOVED***);
						***REMOVED***)
					).then(function(elements) ***REMOVED***
						self.elements = elements;
					***REMOVED***);
				***REMOVED***
			***REMOVED***;
			return Style;
		***REMOVED***)
		.controller('NavCtrl', function($scope, StylesFactory) ***REMOVED***
			StylesFactory
				.getAll()
				.then(function(data) ***REMOVED***
					$scope.styles = data;
				***REMOVED***);
		***REMOVED***)
		.controller('HeadCtrl', function($scope, Style) ***REMOVED***

			// load default style
			$scope.style = new Style('preston', ***REMOVED*** shallow: true ***REMOVED***);

		***REMOVED***).controller('GuideCtrl', function($scope, $state, Style) ***REMOVED***
			$scope.Style = Style;
			$scope.$state = $state;
		***REMOVED***);
	</script>
</body>
</html>
